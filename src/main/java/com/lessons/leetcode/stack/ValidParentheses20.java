package com.lessons.leetcode.stack;

import java.util.Stack;

/**
 * <a href="https://leetcode.com/problems/valid-parentheses/description/">...</a>
 */
public class ValidParentheses20 {

    public boolean isValid(String s) {
        // Создайте пустой стек, чтобы отслеживать открывающиеся скобки.
        // Когда приходит закрывающая скобка ')', ']', '}', то вынимаем из стека элемент.
        // Смотрим что та открывающая скобка, иначе возвращаем false
        Stack<Character> stack = new Stack<>();
        // Перебрать каждый символ в строке
        for (char c : s.toCharArray()) {
            // Если символ является открывающей скобкой, поместите его в стек
            if (c == '(' || c == '[' || c == '{') {
                stack.push(c);
            } else { // Если символ является закрывающей скобкой
                // Если стек пуст, соответствующей открывающей скобки нет, поэтому верните false
                if (stack.isEmpty()) {
                    return false;
                }
                // В противном случае возьмите вершину стека и проверьте, соответствует ли она открывающейся скобке
                char top = stack.peek();
                if ((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')) {
                    // Если да, вытащите открывающуюся скобку из стека
                    stack.pop();
                } else { // В противном случае скобки не совпадают, поэтому верните false.
                    return false;
                }
            }
        }
        // Если стек пуст, все открывающиеся скобки закрыты, поэтому верните true
        // В противном случае появятся несовпадающие открывающие скобки, поэтому верните false
        return stack.isEmpty();
    }
}
